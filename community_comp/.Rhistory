#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library("funfuns")
setwd("~/oculina/community_comp")
#setwd("~/oculina/community_comp")
samdf <- read.csv("oculina16s_sampledata_plusneg_types.csv",header=TRUE)
load("taxa2.Rdata")
load("ps.clean.Rdata")
load("ps.trim.Rdata")
#load("ps.clean.Rdata")
load("ps.rare.Rdata")
tax <- as.data.frame(ps.rare@tax_table@.Data)
tax <- as.data.frame(ps.rare@tax_table@.Data)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
Species = str_replace(tax[,7], "D_6__",""),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
tax_table(ps.rare) <- as.matrix(tax.clean)
#BiocManager::install("microbiome")
#remotes::install_github("r-lib/rlang")
library(microbiome)
#***I DON'T THINK I NEED THIS CODE HERE
ps.coral <- subset_samples(ps.rare,type=="coral")
pseq.core <- core(ps.rare, detection = 0, prevalence = .7)
pseq.core #4 taxa and 61 samples for ps.rare.trim, 5 taxa and 70 samples for ps.trim, 5 taxa and 64 samples for ps.rare
#grouping by all_id (just for coral for now)
ps.coral <- subset_samples(ps.rare,type=="coral") #need for accessory analysis later
ps.trim.coral <-  subset_samples(ps.trim,type=="coral")
#ps.clean.coral <-  subset_samples(ps.clean,type=="coral")
otu_data_unt <- data.frame(ps.trim.coral@otu_table)
#ps.clean.coral <-  subset_samples(ps.clean,type=="coral")
otu_data_unt <- data.frame(ps.trim.coral@otu_table)
#otu_data_unt <- data.frame(ps.clean.coral@otu_table)
otu_data<- data.frame(t(otu_data_unt))
otu_data
#might need to make the sample names an actual row yet, not sure
meta_data = data.frame(ps.trim.coral@sam_data)
meta_data = meta_data %>% rename(Sample.ID = id)
# Step 1: Data preprocessing
feature_table = otu_data; sample_var = "Sample.ID"; group_var = NULL
out_cut = 0.05; zero_cut = 0.90; lib_cut = 1000; neg_lb = FALSE
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
library(readr)
library(tidyverse)
#library(dplyr)
library(nlme)
#install.packages('compositions')
library(compositions)
library(nloptr)
#ancom isn't an R package so you need to go to the ancom github and download the ancom.R file and save into wd
source("ancom.R")
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var = "symbstate"; p_adj_method = "BH"; alpha = 0.05
adj_formula = NULL; rand_formula = "~ 1 | site"
res.ss.all = ANCOM(feature_table, meta_data, struc_zero, main_var, p_adj_method,
alpha, adj_formula, rand_formula)
saveRDS(res.ss.all, file="ancom.res.ss.all.trim.RDS")
# Step 3: Volcano Plot
# Number of taxa except structural zeros
n_taxa = ifelse(is.null(struc_zero), nrow(feature_table), sum(apply(struc_zero, 1, sum) == 0))
# Cutoff values for declaring differentially abundant taxa
cut_off = c(0.9 * (n_taxa -1), 0.8 * (n_taxa -1), 0.7 * (n_taxa -1), 0.6 * (n_taxa -1))
names(cut_off) = c("detected_0.9", "detected_0.8", "detected_0.7", "detected_0.6")
# Annotation data
dat_ann = data.frame(x = min(res.ss.all$fig$data$x), y = cut_off["detected_0.7"], label = "W[0.7]")
fig = res.ss.all$fig +
geom_hline(yintercept = cut_off["detected_0.7"], linetype = "dashed") +
geom_text(data = dat_ann, aes(x = x, y = y, label = label),
size = 4, vjust = -0.5, hjust = 0, color = "orange", parse = TRUE)
fig  #0 W statistic for symb state?
feature_table
feature_table %>%
rowwise() %>%
mutate(med = median(c_across(where(is.numeric)), na.rm = TRUE))
feature_table_med <- feature_table %>%
rowwise() %>%
mutate(med = median(c_across(where(is.numeric)), na.rm = TRUE))
feature_table_med$med
#ps.trim.coral <-  subset_samples(ps.trim,type=="coral")
ps.clean.coral <-  subset_samples(ps.clean,type=="coral")
#otu_data_unt <- data.frame(ps.trim.coral@otu_table)
otu_data_unt <- data.frame(ps.clean.coral@otu_table)
#otu_data_unt <- data.frame(ps.trim.coral@otu_table)
otu_data_unt <- data.frame(ps.clean.coral@otu_table)
?ancom
feature_table
otu_data<- data.frame(t(otu_data_unt))
#might need to make the sample names an actual row yet, not sure
meta_data = data.frame(ps.clean.coral@sam_data)
meta_data = meta_data %>% rename(Sample.ID = id)
meta_data
# Step 1: Data preprocessing
feature_table = otu_data; sample_var = "Sample.ID"; group_var = NULL
out_cut = 0.05; zero_cut = 0.80; lib_cut = 1000; neg_lb = FALSE
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
feature_table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
feature_table
ps.clean.coral
View(ps.clean.coral)
# Step 2: ANCOM
main_var = "symbstate"; p_adj_method = "BH"; alpha = 0.05
adj_formula = NULL; rand_formula = "~ 1 | site"
res.ss.all = ANCOM(feature_table, meta_data, struc_zero, main_var, p_adj_method,
alpha, adj_formula, rand_formula)
knitr::opts_chunk$set(echo = TRUE)
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library("funfuns")
setwd("~/oculina/community_comp")
samdf <- read.csv("oculina16s_sampledata_plusneg_types.csv",header=TRUE)
load("taxa2.Rdata")
load("ps.clean.Rdata")
load("ps.rare.Rdata")
load("ps.rare.trim.Rdata")
load("ps.trim.Rdata")
ps.cleanest <- readRDS("phyloseq.cleanest.RDS")
tax <- as.data.frame(ps.rare@tax_table@.Data)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
Species = str_replace(tax[,7], "D_6__",""),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
tax_table(ps.rare) <- as.matrix(tax.clean)
#ps.trim.coral <-  subset_samples(ps.trim,type=="coral")
ps.rare.trim.coral <-  subset_samples(ps.rare.trim,type=="coral")
#otu_data_unt <- data.frame(ps.trim.coral@otu_table)
otu_data_unt <- data.frame(ps.rare.trim.coral@otu_table)
otu_data<- data.frame(t(otu_data_unt))
#might need to make the sample names an actual row yet, not sure
meta_data = data.frame(ps.rare.trim.coral@sam_data)
#meta_data = data.frame(ps.clean.coral@sam_data)
meta_data = meta_data %>% rename(Sample.ID = id)
# Step 1: Data preprocessing
feature_table = otu_data; sample_var = "Sample.ID"; group_var = NULL
out_cut = 0.05; zero_cut = 0.90; lib_cut = 1000; neg_lb = FALSE
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
library(readr)
library(tidyverse)
#library(dplyr)
library(nlme)
#install.packages('compositions')
library(compositions)
library(nloptr)
#ancom isn't an R package so you need to go to the ancom github and download the ancom.R file and save into wd
source("ancom.R")
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
# Step 2: ANCOM
main_var = "symbstate"; p_adj_method = "BH"; alpha = 0.05
#adj_formula = NULL; rand_formula = NULL
adj_formula = NULL; rand_formula = "~ 1 | site"
res.ss.all = ANCOM(feature_table, meta_data, struc_zero, main_var, p_adj_method,
alpha, adj_formula, rand_formula)
knitr::opts_chunk$set(echo = TRUE)
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library("funfuns")
setwd("~/oculina/community_comp")
samdf <- read.csv("oculina16s_sampledata_plusneg_types.csv",header=TRUE)
load("taxa2.Rdata")
load("ps.rare.trim.Rdata")
library(readr)
library(tidyverse)
#library(dplyr)
library(nlme)
#install.packages('compositions')
library(compositions)
library(nloptr)
#ancom isn't an R package so you need to go to the ancom github and download the ancom.R file and save into wd
source("ancom.R")
#ps.trim.coral <-  subset_samples(ps.trim,type=="coral")
ps.rare.trim.coral <-  subset_samples(ps.rare.trim,type=="coral")
ps.rare.trim.coral.NR <- subset_samples(ps.rare.trim.coral,site=="NR")
otu_data_unt <- data.frame(ps.rare.trim.coral.NR@otu_table)
otu_data<- data.frame(t(otu_data_unt))
meta_data = data.frame(ps.rare.trim.coral.NR@sam_data)
meta_data = meta_data %>% rename(Sample.ID = id)
# Step 1: Data preprocessing
feature_table = otu_data; sample_var = "Sample.ID"; group_var = NULL
out_cut = 0.05; zero_cut = 0.90; lib_cut = 1000; neg_lb = FALSE
prepro = feature_table_pre_process(feature_table, meta_data, sample_var, group_var,
out_cut, zero_cut, lib_cut, neg_lb)
feature_table = prepro$feature_table # Preprocessed feature table
meta_data = prepro$meta_data # Preprocessed metadata
struc_zero = prepro$structure_zeros # Structural zero info
feature_table
meta_data
###symb state
# Step 2: ANCOM
main_var = "symbstate"; p_adj_method = "BH"; alpha = 0.05
adj_formula = NULL; rand_formula = NULL
res.ss.NR = ANCOM(feature_table, meta_data, struc_zero, main_var, p_adj_method,
alpha, adj_formula, rand_formula)
#saveRDS(res.ss.NR,file="ancom.res.ss.NR.RDS")
# Step 3: Volcano Plot
# Number of taxa except structural zeros
n_taxa = ifelse(is.null(struc_zero), nrow(feature_table), sum(apply(struc_zero, 1, sum) == 0))
# Cutoff values for declaring differentially abundant taxa
cut_off = c(0.9 * (n_taxa -1), 0.8 * (n_taxa -1), 0.7 * (n_taxa -1), 0.6 * (n_taxa -1))
names(cut_off) = c("detected_0.9", "detected_0.8", "detected_0.7", "detected_0.6")
# Annotation data
dat_ann = data.frame(x = min(res.ss.NR$fig$data$x), y = cut_off["detected_0.7"], label = "W[0.7]")
fig = res.ss.NR$fig +
geom_hline(yintercept = cut_off["detected_0.7"], linetype = "dashed") +
geom_text(data = dat_ann, aes(x = x, y = y, label = label),
size = 4, vjust = -0.5, hjust = 0, color = "orange", parse = TRUE)
fig #only one value above 0? weird
tax <- as.data.frame(ps.rare.trim@tax_table@.Data)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
Species = str_replace(tax[,7], "D_6__",""),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
tax_table(ps.rare.trim) <- as.matrix(tax.clean)
#BiocManager::install("microbiome")
#remotes::install_github("r-lib/rlang")
library(microbiome)
#***I DON'T THINK I NEED THIS CODE HERE
ps.coral <- subset_samples(ps.rare.trim,type=="coral")
pseq.core <- core(ps.rare.trim, detection = 0, prevalence = .7)
pseq.core #4 taxa and 61 samples for ps.rare.trim, 5 taxa and 70 samples for ps.trim, 5 taxa and 64 samples for ps.rare
#grouping by all_id (just for coral for now)
ps.coral <- subset_samples(ps.rare.trim,type=="coral") #need for accessory analysis later
ps.core.coral <- subset_samples(pseq.core,type=="coral")
ps_glom.coral <- tax_glom(ps.core.coral, "Genus")
ps0.coral <- transform_sample_counts(ps_glom.coral, function(x) x / sum(x))
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
ps.core.coral.allid <- transform_sample_counts(ps1.coral, function(x) x / sum(x))
#ps grouped by site (because all_id shows every site-symb-season combination)
ps1.core.coral.site <- merge_samples(ps.core.coral, "site")
ps.core.coral.site <- transform_sample_counts(ps1.core.coral.site, function(x) x / sum(x))
#ps grouped by season
ps1.core.coral.season <- merge_samples(ps.core.coral, "season")
ps.core.coral.season <- transform_sample_counts(ps1.core.coral.season, function(x) x / sum(x))
#ps grouped by symb state
ps1.core.coral.symbstate <- merge_samples(ps.core.coral, "symbstate")
ps.core.coral.symbstate <- transform_sample_counts(ps1.core.coral.symbstate, function(x) x / sum(x))
#by site (need these for when just plotting data from one site)
ps.core.NR <- subset_samples(pseq.core,site=="NR")
ps.core.coral.NR <- subset_samples(ps.core.coral,site=="NR")
ps.core.RI <- subset_samples(pseq.core,site=="RI")
ps.core.coral.RI <- subset_samples(ps.core.coral,site=="RI")
ps.core.CL <- subset_samples(pseq.core,site=="CL")
ps.core.coral.CL <- subset_samples(ps.core.coral,site=="CL")
#ps relative abundance core coral
ps.core.coral.rel <- transform_sample_counts(ps2.coral, function(x) x / sum(x))
# by all_id (not relative)
gg.bar.coral.core.genus <- plot_bar(ps2.coral, fill="Genus")+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))+
scale_fill_brewer(palette="BrBG")
# by all_id (not relative)
gg.bar.coral.core.genus <- plot_bar(ps.core.coral.allid, fill="Genus")+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1))+
scale_fill_brewer(palette="BrBG")
gg.bar.coral.core.genus
#site
gg.bar.coral.core.site.genus <- plot_bar(ps.core.coral.site, fill="Genus")+
geom_bar(stat="identity")+
theme_cowplot()+
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust = 1)) +
scale_fill_brewer(palette="BrBG")
gg.bar.coral.core.site.genus
pseq.core <- core(ps.trim, detection = 0, prevalence = .7)
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library("funfuns")
setwd("~/oculina/community_comp")
samdf <- read.csv("oculina16s_sampledata_plusneg_types.csv",header=TRUE)
load("taxa2.Rdata")
#load("ps.clean.Rdata")
#load("ps.rare.Rdata")
#load("ps.rare.trim.Rdata")
load("ps.trim.Rdata")
#ps.cleanest <- readRDS("phyloseq.cleanest.RDS")
tax <- as.data.frame(ps.trim@tax_table@.Data)
tax.clean <- data.frame(row.names = row.names(tax),
Kingdom = str_replace(tax[,1], "D_0__",""),
Phylum = str_replace(tax[,2], "D_1__",""),
Class = str_replace(tax[,3], "D_2__",""),
Order = str_replace(tax[,4], "D_3__",""),
Family = str_replace(tax[,5], "D_4__",""),
Genus = str_replace(tax[,6], "D_5__",""),
Species = str_replace(tax[,7], "D_6__",""),
stringsAsFactors = FALSE)
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:7){ tax.clean[,i] <- as.character(tax.clean[,i])}
####### Fill holes in the tax table
tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
if (tax.clean[i,2] == ""){
kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
tax.clean[i, 2:7] <- kingdom
} else if (tax.clean[i,3] == ""){
phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
tax.clean[i, 3:7] <- phylum
} else if (tax.clean[i,4] == ""){
class <- paste("Class_", tax.clean[i,3], sep = "")
tax.clean[i, 4:7] <- class
} else if (tax.clean[i,5] == ""){
order <- paste("Order_", tax.clean[i,4], sep = "")
tax.clean[i, 5:7] <- order
} else if (tax.clean[i,6] == ""){
family <- paste("Family_", tax.clean[i,5], sep = "")
tax.clean[i, 6:7] <- family
} else if (tax.clean[i,7] == ""){
tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
}
}
tax_table(ps.trim) <- as.matrix(tax.clean)
pseq.core <- core(ps.trim, detection = 0, prevalence = .7)
#grouping by all_id (just for coral for now)
ps.coral <- subset_samples(ps.trim,type=="coral") #need for accessory analysis later
ps.core.coral <- subset_samples(pseq.core,type=="coral")
ps_glom.coral <- tax_glom(ps.core.coral, "Genus")
ps0.coral <- transform_sample_counts(ps_glom.coral, function(x) x / sum(x))
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
View(ps.rare.trim)
View(ps.rare.trim.coral)
View(ps.rare.trim)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(cowplot)
library(phyloseq)
library(car)
library(ggpubr)
library(vegan)
library(dada2)
setwd("~/oculina/diversity")
#setwd("~/oculina/diversity")
samdf <- read.csv("oculina16s_sampledata_plusneg_types.csv",header=TRUE)
samdf
row.names(samdf) <- samdf$id
load("taxa2.Rdata")
#setwd("~/oculina/diversity")
seqtab.rare <- read.csv("oculina16s_seqtab.cleanest.rare_2k copy",row.names=1)
ps.rare <- phyloseq(otu_table(seqtab.rare, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa2))
ps.rare
#raw, unrarefied version:
seqtab.clean <- read.csv("oculina16s_seqtab.rev.cleanest.csv",row.names=1)
ps.clean <- phyloseq(otu_table(seqtab.clean, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa2))
ps.clean
seqtab.rare.trim <- read.csv("oculina16s_seqtab.rev.trim.rare_2k.csv",row.names=1)
ps.rare.trim <- phyloseq(otu_table(seqtab.rare.trim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa2))
ps.rare.trim
#checking what happens if we read in the unrarefied version:
seqtab.trim <- read.csv("oculina16s_seqtab.rev.cleanest.trim.csv",row.names=1)
ps.trim <- phyloseq(otu_table(seqtab.trim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa2))
ps.trim
save(ps.trim,file="ps.trim.Rdata")
setwd("~/oculina/community_comp")
save(ps.trim,file="ps.trim.Rdata")
ps.trim
View(ps.trim)
ps0.coral <- transform_sample_counts(ps_glom.coral, function(x) x / sum(x))
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
pseq.core <- core(ps.trim, detection = 0, prevalence = .7)
pseq.core #4 taxa and 61 samples for ps.rare.trim, 5 taxa and 70 samples for ps.trim, 5 taxa and 64 samples for ps.rare
#grouping by all_id (just for coral for now)
ps.coral <- subset_samples(ps.trim,type=="coral") #need for accessory analysis later
ps.core.coral <- subset_samples(pseq.core,type=="coral")
ps_glom.coral <- tax_glom(ps.core.coral, "Genus")
ps0.coral <- transform_sample_counts(ps_glom.coral, function(x) x / sum(x))
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
ps0.coral <- transform_sample_counts(ps_glom.coral, function(x) x / sum(x))
#ps core coral grouped by all_id
ps1.coral <- merge_samples(ps0.coral, "all_id")
ps.core.coral.allid <- transform_sample_counts(ps1.coral, function(x) x / sum(x))
